#ifndef TEMPLATES_H
#define TEMPLATES_H

/* HTML Templates
 *
 * The original .html files are in "PolargraphESP32/static"
 *
 * Escape the HTML, mostly double quotes " (Search online c++ escape tool)
 * If you don't want to compress to one line, you can separate the lines of a string literal with \
 * I reccommend minifying javascript and html to reduce buffer size (search js minifying tools), and debugging the front end from a static html page
 * Need to know a maximum buffer size, instead of using the heap
 * If you need to add variables (like html templating), you can use snprintf
 *
 */



#define INDEX_BUFFER_SIZE 8000
char * indexHTML() {
  static char buffer[INDEX_BUFFER_SIZE];

  snprintf(buffer, INDEX_BUFFER_SIZE,
    "<!DOCTYPE html><html>  <head lang=\"en\"><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><title>Demobots Polargraph</title></head>  <body style=\"width:auto; font-family:'Arial'; background-color:#1d1f21; color:#c5c8c6; padding:1em;\">      <h1>Demobots Polargraph</h1>      <div id=\"div_input_coorinate\" style=\"padding:1em 0em;\">        <p>Input Coordinates</p>        <input id=\"input_coorinate\" type=\"text\" placeholder=\"(x1,y1)(x2,y2)(x3,y3)\" >      </div>      <div id=\"div_btn_control\" style=\"padding:1em 0em;\">        <button id=\"btn_start\">Start</button>        <button id=\"btn_stop\">Stop</button>        <button id=\"btn_zero\">Zero</button>      </div>      <div style=\"padding:1em 0em;\">        <button id=\"btn_get_state\">Get State</button>      </div>      <div id=\"dev_device_info\" style=\"padding:1em 0em;\">        <p>Last Config:</p>        <p id=\"last_config\"></p>        <p>Last State:</p>        <p id=\"last_state\"></p>      </div>      <div id=\"svg_input\">        <div>          <h2>SVG Input</h2>          <label for=\"svgfile\">Choose svg file to upload</label>          <input type=\"file\" id=\"svgfile\" name=\"svgfile\" accept=\".svg\">          <button id=\"btn_load_svg\">Load SVG</button>        </div>        <button id=\"btn_start_svg\">Start</button>        <label for=\"svg_scale\">Scale SVG</label>        <input id=\"svg_scale\" type=\"number\" placeholder=\"1\" value=\"1\" style=\"width:3em;\" >        <label for=\"distance_btwn\">Distance Between Path Points</label>        <input id=\"distance_btwn\" type=\"number\" placeholder=\"2\" value=\"2\" size=\"2\" style=\"width:3em;\" >        <button id=\"btn_reset_svg\" onClick=\"window.location.reload();\">Reset Input</button>        <p>Original SVG object:</p>        <div id=\"svg_container\"><svg id=\"svg_obj\" height=\"560\" width=\"900\" style=\"border: 1px solid;\"></svg></div>      </div>      <div id=\"coordinate_display\" >        <h2>Coordinate Display</h2>        <canvas id=\"svg_canvas\" width=\"900\" height=\"560\" style=\"border:1px solid;\"> </canvas>        <p id=\"x_list\" style=\"max-width: 100%; overflow-wrap: break-word; word-wrap: break-word;\">X: </p>        <p id=\"y_list\" style=\"max-width: 100%; overflow-wrap: break-word; word-wrap: break-word;\">Y: </p>      </div>      <script>      var last_config={},last_state={},btn_start=document.getElementById(\"btn_start\"),btn_stop=document.getElementById(\"btn_stop\"),btn_zero=document.getElementById(\"btn_zero\"),btn_get_state=document.getElementById(\"btn_get_state\"),btn_start_svg=document.getElementById(\"btn_start_svg\"),btn_load_svg=document.getElementById(\"btn_load_svg\"),x_max=450,y_max=280,path_step=2,coordinatesX=[],coordinatesY=[];function configJSON(t,e,n){console.log(\"converting coordinates: \"+t);for(var o,s={bx:\"{}\",by:\"{}\",d:String(e),cb:String(!1),zero:String(n)},a=\"{\",i=\"{\",r=/\\(\\s?(-?\\d+)\\s?,\\s?(-?\\d+)\\s?\\)/g;o=r.exec(t);)a+=o[1]+\",\",i+=o[2]+\",\";return s.bx=a+\"}\",s.by=i+\"}\",s}function configJSON_XY(t,e,n,o){console.log(\"converting coordinates\");var s={bx:\"{}\",by:\"{}\",d:String(n),cb:String(!1),zero:String(o)};return s.bx=\"{\"+t+\",}\",s.by=\"{\"+e+\",}\",s}function postConfig(t){console.log(\"Posting config\"),console.log(t);var e=\"config=\"+JSON.stringify(t);console.log(e);var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4==this.readyState&&200==this.status){var e=n.responseText;console.log(e),last_config=t,document.getElementById(\"last_config\").innerText=JSON.stringify(last_config)}},n.open(\"POST\",\"/set_config\",!0),n.send(e)}function getState(){console.log(\"Getting state\");var t=new XMLHttpRequest;t.onreadystatechange=function(){if(4==this.readyState&&200==this.status){console.log(\"Receieved new state\");var e=t.responseText;console.log(e),last_state=e,document.getElementById(\"last_state\").innerText=JSON.stringify(last_state)}},t.open(\"GET\",\"/get_state\",!0),t.send()}function convert_svg(){var t=input_svg();if(0!==t)read_svg(t)}function input_svg(){var t=document.getElementById(\"svgfile\");return\"files\"in t&&t.files.length>=0?t.files[0]:0}function read_svg(t){var e=document.getElementById(\"svg_container\"),n=new FileReader;return n.onload=function(){var t=n.result;e.innerHTML=t;var o=e.getElementsByTagName(\"svg\")[0];console.log(o),o.setAttribute(\"viewBox\",\"-\"+x_max+\" -\"+y_max+\" \"+2*x_max+\" \"+2*y_max),o.setAttribute(\"width\",2*x_max),o.setAttribute(\"height\",2*y_max),o.style.border=\"1px solid\",o.id=\"svg_obj\",e.innerHTML=o.outerHTML,svg_to_coord(o),draw_canvas(coordinatesX,coordinatesY,\"svg_canvas\"),display_coords(coordinatesX,coordinatesY)},n.readAsText(t),svg_obj}function svg_to_coord(t){console.log(String(t)),console.log(t);var e=document.getElementsByTagName(\"path\");console.log(String(e)+\" \"+String(e[0])),console.log(e),console.log(e[0]),path_step=document.getElementById(\"distance_btwn\").value;var n=document.getElementById(\"svg_scale\").value;for(console.log(\"path step: \"+String(path_step)+\", path scale: \"+String(n)),u=0;u<e.length;u++){var o=e[u].getTotalLength();console.log(\"length = \"+o);var s,a=x_max,i=y_max,r=-x_max,c=-y_max;for(s=0;s<o;s+=2){var g=e[u].getPointAtLength(s),d=g.x,l=-g.y;coordinatesX.push(d),coordinatesY.push(l),d<a?a=d:d>r?r=d:l<i?i=l:l>c&&(c=l)}}for(var _=(r-a)/2,v=(c-i)/2,u=0;u<coordinatesX.length;u++)coordinatesX[u]=Math.round((coordinatesX[u]-_)*n),coordinatesY[u]=Math.round((coordinatesY[u]+v)*n)}function display_coords(t,e){var n=document.getElementById(\"x_list\"),o=document.getElementById(\"y_list\");n.innerText=\"X: \"+t,o.innerText=\"Y: \"+e}function draw_canvas_str(t,e,n){draw_canvas(t.split(\",\"),e.split(\",\"),n)}function draw_canvas(t,e,n){var o,s=document.getElementById(n),a=s.getContext(\"2d\");for(a.strokeStyle=\"#C5C8C6\",a.translate(s.width/2,s.height/2),a.rotate(Math.PI),a.scale(-.75,.75),o=0;o<t.length-1;o++)a.moveTo(t[o],e[o]),a.lineTo(t[o+1],e[o+1]),a.stroke()}btn_start.addEventListener(\"click\",function(){postConfig(configJSON(document.getElementById(\"input_coorinate\").value,!0,!1))}),btn_start_svg.addEventListener(\"click\",function(){postConfig(configJSON_XY(coordinatesX,coordinatesY,!0,!1))}),btn_load_svg.addEventListener(\"click\",function(){convert_svg()}),btn_stop.addEventListener(\"click\",function(){postConfig(configJSON(\"\",!1,!1))}),btn_zero.addEventListener(\"click\",function(){postConfig(configJSON(\"\",!1,!0))}),btn_get_state.addEventListener(\"click\",function(){postConfig(getState())});      </script>  </body></html>"
    );

  return buffer;
}


#endif
